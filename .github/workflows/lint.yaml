name: Lint
on:
  pull_request:
  push:
    branches:
      - main
jobs:
  set-context:
    name: Set context
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.set-variables.outputs.backend-image }}
      frontend-image: ${{ steps.set-variables.outputs.frontend-image }}
      e2e-image: ${{ steps.set-variables.outputs.e2e-image }}

    steps:
      - id: set-variables
        name: Set variables
        run: |
          echo "backend-image=ghcr.io/przemoo16/project-starter-graphql-backend" >> $GITHUB_OUTPUT
          echo "frontend-image=ghcr.io/przemoo16/project-starter-graphql-frontend" >> $GITHUB_OUTPUT
          echo "e2e-image=ghcr.io/przemoo16/project-starter-graphql-e2e" >> $GITHUB_OUTPUT

  build-push-backend-image:
    name: Build and push backend image
    needs: [set-context]

    permissions:
      contents: read
      packages: write

    uses: ./.github/workflows/build-push-image.yaml
    with:
      cache-key: backend
      context: "{{defaultContext}}:backend"
      target: dev
      images: ${{ needs.set-context.outputs.backend-image }}
      registry: ghcr.io
    secrets:
      registry-username: ${{ github.actor }}
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  build-push-frontend-image:
    name: Build and push frontend image
    needs: [set-context]

    permissions:
      contents: read
      packages: write

    uses: ./.github/workflows/build-push-image.yaml
    with:
      cache-key: frontend
      context: "{{defaultContext}}:frontend"
      target: dev
      images: ${{ needs.set-context.outputs.frontend-image }}
      registry: ghcr.io
    secrets:
      registry-username: ${{ github.actor }}
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  build-push-e2e-image:
    name: Build and push e2e image
    needs: [set-context]

    permissions:
      contents: read
      packages: write

    uses: ./.github/workflows/build-push-image.yaml
    with:
      cache-key: e2e
      context: "{{defaultContext}}:e2e"
      images: ${{ needs.set-context.outputs.e2e-image }}
      registry: ghcr.io
    secrets:
      registry-username: ${{ github.actor }}
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  lint:
    name: Run linter
    runs-on: ubuntu-latest
    needs:
      [
        set-context,
        build-push-backend-image,
        build-push-frontend-image,
        build-push-e2e-image,
      ]

    permissions:
      contents: read
      packages: read

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          # FIXME: Change to python 3.12 after pulumi works with it
          python-version: "3.11"

      - name: Install pre-commit
        run: pip install pre-commit
        shell: bash

      - name: Restore pre-commit cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit/
          key: ${{ runner.os }}-${{ env.pythonLocation }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      # FIXME: Running mypy against the pulumi is super slow. Using cache to speed it
      # up. It utilizes the restore-keys to always update the existing cache:
      # https://github.com/actions/cache/blob/main/tips-and-workarounds.md#update-a-cache
      - name: Restore mypy cache
        uses: actions/cache@v3
        with:
          path: ./.mypy_cache
          key: ${{ runner.os }}-${{ env.pythonLocation }}-mypy-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ env.pythonLocation }}-mypy

      - name: Restore infrastructure venv cache
        id: infrastructure-venv-cache
        uses: actions/cache@v3
        with:
          path: ./infrastructure/venv
          key: ${{ runner.os }}-${{ env.pythonLocation }}-infrastructure-venv-${{ hashFiles('./infrastructure/requirements.txt') }}

      - name: Create infrastructure venv
        if: steps.infrastructure-venv-cache.outputs.cache-hit != 'true'
        run: |
          python -m venv ./infrastructure/venv
          ./infrastructure/venv/bin/pip install -r ./infrastructure/requirements.txt
        shell: bash

      - name: Create env file from the template
        run: cp ./.env.template ./.env
        shell: bash

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run linter
        run: |
          BACKEND_IMAGE=${{ needs.set-context.outputs.backend-image }}:${{ needs.build-push-backend-image.outputs.image-tag }} \
          FRONTEND_IMAGE=${{ needs.set-context.outputs.frontend-image }}:${{ needs.build-push-frontend-image.outputs.image-tag }} \
          E2E_IMAGE=${{ needs.set-context.outputs.e2e-image }}:${{ needs.build-push-e2e-image.outputs.image-tag }} \
          make lint
        shell: bash
