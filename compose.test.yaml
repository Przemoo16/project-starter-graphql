services:
  db-test:
    image: postgres:15.4
    networks:
      - backend-test
    environment:
      POSTGRES_PASSWORD: "${DB__PASSWORD}"
      POSTGRES_USER: "${DB__USERNAME}"
      POSTGRES_DB: "${DB__NAME}"
      POSTGRES_HOST: "${DB__HOST}"
      POSTGRES_PORT: "${DB__PORT}"
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username",
          "${DB__USERNAME}",
          "--dbname",
          "${DB__NAME}",
          "--host",
          "${DB__HOST}",
          "--port",
          "${DB__PORT}",
        ]
      interval: 2s
      timeout: 3s
      retries: 3
      start_period: 5s

  redis-test:
    image: redis:7.0
    networks:
      - backend-test

  worker-test:
    image: "${BACKEND_IMAGE}"
    build:
      context: ./backend
      target: dev
    networks:
      - backend-test
    depends_on:
      - redis-test
    env_file:
      - .env
      - .env.test
    command: "celery --app backend.worker:worker_app worker --loglevel INFO"

  scheduler-test:
    image: "${BACKEND_IMAGE}"
    build:
      context: ./backend
      target: dev
    networks:
      - backend-test
    depends_on:
      - redis-test
    env_file:
      - .env
      - .env.test
    command: "celery --app backend.worker:worker_app beat --loglevel INFO"

  backend-test:
    image: "${BACKEND_IMAGE}"
    build:
      context: ./backend
      target: dev
    networks:
      - backend-test
    depends_on:
      db-test:
        condition: service_healthy
      worker-test:
        condition: service_started
      scheduler-test:
        condition: service_started
    env_file:
      - .env
      - .env.test

  frontend-test:
    image: "${FRONTEND_IMAGE}"
    build:
      context: ./frontend
      target: dev
    networks:
      - frontend-test

networks:
  backend-test:
  frontend-test:
