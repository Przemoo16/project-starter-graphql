services:
  db:
    image: postgres:15.4
    networks:
      - backend
    ports:
      - "5432:5432"
    volumes:
      - type: volume
        source: db-data
        target: /var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: "${DB__PASSWORD}"
      POSTGRES_USER: "${DB__USERNAME}"
      POSTGRES_DB: "${DB__NAME}"
      POSTGRES_HOST: "${DB__HOST}"
      POSTGRES_PORT: "${DB__PORT}"
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username",
          "${DB__USERNAME}",
          "--dbname",
          "${DB__NAME}",
          "--host",
          "${DB__HOST}",
          "--port",
          "${DB__PORT}",
        ]
      interval: 2s
      timeout: 3s
      retries: 3
      start_period: 5s

  redis:
    image: redis:7.0
    networks:
      - backend
    ports:
      - "6379:6379"

  frontend:
    image: "${FRONTEND_IMAGE}"
    build:
      context: ./frontend
      target: dev
    networks:
      - frontend
    volumes:
      - type: bind
        source: ./frontend
        target: /opt/app
      # Ignore node_modules from the host when using bind mounts by applying the named volume
      - type: volume
        source: node_modules
        target: /opt/app/node_modules

  backend:
    image: "${BACKEND_IMAGE}"
    build:
      context: ./backend
      target: dev
    networks:
      - backend
    volumes:
      - type: bind
        source: ./backend
        target: /opt/app
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env

  proxy:
    build:
      context: ./proxy
    networks:
      - backend
      - frontend
    ports:
      - "5173:80"
    volumes:
      - type: bind
        source: ./proxy/nginx.conf
        target: /var/nginx.conf
    depends_on:
      - backend
      - frontend

  worker:
    image: "${BACKEND_IMAGE}"
    build:
      context: ./backend
      target: dev
    networks:
      - backend
    volumes:
      - type: bind
        source: ./backend
        target: /opt/app
    depends_on:
      - redis
    env_file:
      - .env
    command: "celery --app backend.worker:worker_app worker --loglevel INFO"

  scheduler:
    image: "${BACKEND_IMAGE}"
    build:
      context: ./backend
      target: dev
    networks:
      - backend
    volumes:
      - type: bind
        source: ./backend
        target: /opt/app
    depends_on:
      - redis
    env_file:
      - .env
    command: "celery --app backend.worker:worker_app beat --loglevel INFO"

  flower:
    image: "${BACKEND_IMAGE}"
    build:
      context: ./backend
      target: dev
    networks:
      - backend
    ports:
      - "5555:5555"
    volumes:
      - type: bind
        source: ./backend
        target: /opt/app
    depends_on:
      - redis
    env_file:
      - .env
    command: "celery --app backend.worker:worker_app flower"

networks:
  frontend:
  backend:

volumes:
  db-data:
  node_modules:
