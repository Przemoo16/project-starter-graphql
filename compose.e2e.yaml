services:
  db-e2e:
    image: postgres:15.4
    networks:
      - backend-e2e
    environment:
      POSTGRES_PASSWORD: "${DB__PASSWORD}"
      POSTGRES_USER: "${DB__USERNAME}"
      POSTGRES_DB: "${DB__NAME}"
      POSTGRES_HOST: "${DB__HOST}"
      POSTGRES_PORT: "${DB__PORT}"
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username",
          "${DB__USERNAME}",
          "--dbname",
          "${DB__NAME}",
          "--host",
          "${DB__HOST}",
          "--port",
          "${DB__PORT}",
        ]
      interval: 2s
      timeout: 3s
      retries: 3
      start_period: 5s

  cache-e2e:
    image: redis:7.0
    networks:
      - backend-e2e

  worker-e2e:
    image: "${BACKEND_IMAGE}"
    build:
      context: ./backend
    networks:
      - backend-e2e
    depends_on:
      - cache-e2e
    env_file:
      - .env.template
      - .env.e2e
    command: "celery --app backend.worker:worker_app worker --loglevel INFO"

  scheduler-e2e:
    image: "${BACKEND_IMAGE}"
    build:
      context: ./backend
    networks:
      - backend-e2e
    depends_on:
      - cache-e2e
    env_file:
      - .env.template
      - .env.e2e
    command: "celery --app backend.worker:worker_app beat --loglevel INFO"

  backend-e2e:
    image: "${BACKEND_IMAGE}"
    build:
      context: ./backend
    networks:
      - backend-e2e
    depends_on:
      db-e2e:
        condition: service_healthy
      worker-e2e:
        condition: service_started
      scheduler-e2e:
        condition: service_started
    env_file:
      - .env.template
      - .env.e2e

  frontend-e2e:
    image: "${FRONTEND_IMAGE}"
    build:
      context: ./frontend
    networks:
      - frontend-e2e

  proxy-e2e:
    image: "${PROXY_IMAGE}"
    build:
      context: ./proxy
    networks:
      - backend-e2e
      - frontend-e2e
      - proxy-e2e
    environment:
      FRONTEND_UPSTREAM: http://frontend-e2e
      BACKEND_UPSTREAM: http://backend-e2e
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 2s
      timeout: 3s
      retries: 3
      start_period: 5s
    depends_on:
      - frontend-e2e
      - backend-e2e

  e2e:
    image: "${E2E_IMAGE}"
    build:
      context: ./e2e
    networks:
      - proxy-e2e
    volumes:
      - type: bind
        source: ./e2e
        target: /opt/app
      # Ignore node_modules from the host when using bind mounts by applying the named volume
      - type: volume
        source: node_modules-e2e
        target: /opt/app/node_modules
    depends_on:
      proxy-e2e:
        condition: service_healthy

networks:
  backend-e2e:
  frontend-e2e:
  proxy-e2e:

volumes:
  node_modules-e2e:
